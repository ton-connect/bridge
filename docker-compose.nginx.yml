services:
  valkey:
    image: valkey/valkey:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - bridge_network
    restart: unless-stopped

  bridge1:
    build:
      context: .
      dockerfile: Dockerfile.bridge3
    container_name: bridge1
    environment:
      PORT: 8081
      STORAGE: "valkey"
      VALKEY_URI: "redis://valkey:6379"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      valkey:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  bridge2:
    build:
      context: .
      dockerfile: Dockerfile.bridge3
    container_name: bridge2
    environment:
      PORT: 8081
      STORAGE: "valkey"
      VALKEY_URI: "redis://valkey:6379"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      valkey:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  bridge3:
    build:
      context: .
      dockerfile: Dockerfile.bridge3
    container_name: bridge3
    environment:
      PORT: 8081
      STORAGE: "valkey"
      VALKEY_URI: "redis://valkey:6379"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      valkey:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  # Dummy service that waits for all bridge instances
  bridge:
    image: alpine:latest
    container_name: bridge
    depends_on:
      bridge1:
        condition: service_started
      bridge2:
        condition: service_started
      bridge3:
        condition: service_started
    command: ["echo", "All bridge instances are ready"]
    networks:
      bridge_network:
        ipv4_address: 172.20.0.20
    dns:
      - 172.20.0.10  # dnsmasq IP

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      bridge:
        condition: service_started
    networks:
      - bridge_network
    restart: unless-stopped

  integration:
    build:
      context: .
      dockerfile: Dockerfile.integration
    container_name: bridge-integration
    environment:
      BRIDGE_URL: "http://nginx:80/bridge"
    depends_on:
      nginx:
        condition: service_started
    networks:
      - bridge_network
    command: ["/bin/bash", "-c", "make test-bridge-sdk"]
    # command: ["/bin/bash", "-c", "tail -f /dev/null"]

  gointegration:
    build:
      context: .
      dockerfile: Dockerfile.gointegration
    container_name: bridge-gointegration
    environment:
      BRIDGE_URL: "http://bridge:8081/bridge"
    depends_on:
      bridge:
        condition: service_started
    networks:
      - bridge_network
    command: ["/bin/bash", "-c", "make test-gointegration"]
    # command: ["/bin/bash", "-c", "tail -f /dev/null"]

volumes:
  valkey_data:

networks:
  bridge_network:
    driver: bridge